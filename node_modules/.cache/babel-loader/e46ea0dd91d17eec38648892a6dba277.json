{"ast":null,"code":"var _jsxFileName = \"/Users/tblanchet/Desktop/book-search-react/src/components/App.js\";\nimport React from 'react';\nimport SearchForm from './SearchForm';\nimport SearchResult from './SearchResult'; // import API from '../services/API';\n\nimport books from '../sample-books';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchresults: []\n      /* I had several problems with the open books api:\n         First I couldn't find a way to search by title or author, just by an id like isbn (reasonable),\n         then I had a CORS policy error, which I overlooked by using a proxy I found on the internet,\n         and at last all my requests were returning an empty object, weird because when using curl on\n         my console they did return book information (although not something I could directly use here)\n         so, in order to not waste more time, I decided to just create some preloaded objects for the excercise,\n         and leave this unused code here so you could take a look at what I was trying to do.\n      \n      searchByIsbn = async (query) => {\n        try {\n          const parameters = `api/autbibkeys=ISBN:${query}`;\n          const response = await API.makeRequest({ parameters: parameters, method: 'GET', data: this.state.searchresults });\n          console.log(response);\n        } catch (error) {\n          alert(error);\n        }\n      }\n      */\n\n    };\n\n    this.searchForBooks = (query, type) => {\n      let searchresults;\n\n      switch (type) {\n        case 'title':\n        case 'author':\n          searchresults = books.filter(book => book[type].toLowerCase().trim().indexOf(query.toLowerCase().trim()) > -1);\n          break;\n\n        case 'isbn':\n          searchresults = books.filter(book => book[type].toString().trim() === query.trim());\n          break;\n\n        default:\n          return;\n      }\n\n      this.setState({\n        searchresults\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(SearchForm, {\n      searchForBooks: this.searchForBooks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      className: \"search-results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.state.searchresults.map(key => React.createElement(SearchResult, {\n      key: key,\n      index: 1,\n      details: this.state.searchresults[key],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tblanchet/Desktop/book-search-react/src/components/App.js"],"names":["React","SearchForm","SearchResult","books","App","Component","state","searchresults","searchForBooks","query","type","filter","book","toLowerCase","trim","indexOf","toString","setState","render","map","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,aAAa,EAAE;AAGjB;;;;;;;;;;;;;;;;;;;AAJQ,KADwB;;AAAA,SAwBhCC,cAxBgC,GAwBf,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAChC,UAAIH,aAAJ;;AAEA,cAAQG,IAAR;AACE,aAAK,OAAL;AACA,aAAK,QAAL;AACEH,UAAAA,aAAa,GAAGJ,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACF,IAAD,CAAJ,CAAWG,WAAX,GAAyBC,IAAzB,GAAgCC,OAAhC,CAAwCN,KAAK,CAACI,WAAN,GAAoBC,IAApB,EAAxC,IAAsE,CAAC,CAA5F,CAAhB;AACA;;AACF,aAAK,MAAL;AACEP,UAAAA,aAAa,GAAGJ,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACF,IAAD,CAAJ,CAAWM,QAAX,GAAsBF,IAAtB,OAAiCL,KAAK,CAACK,IAAN,EAAtD,CAAhB;AACA;;AACF;AAAS;AARX;;AAWA,WAAKG,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AACD,KAvC+B;AAAA;;AAyChCW,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,cAAc,EAAE,KAAKV,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKF,KAAL,CAAWC,aAAX,CAAyBY,GAAzB,CACCC,GAAG,IACD,oBAAC,YAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,KAAK,EAAE,CAFT;AAGE,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWC,aAAX,CAAyBa,GAAzB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADH,CAFF,CADF;AAeD;;AAzD+B;;AA6DlC,eAAehB,GAAf","sourcesContent":["import React from 'react';\nimport SearchForm from './SearchForm';\nimport SearchResult from './SearchResult';\n// import API from '../services/API';\nimport books from '../sample-books';\n\nclass App extends React.Component {\n  state = {\n    searchresults: []\n  }\n\n  /* I had several problems with the open books api:\n     First I couldn't find a way to search by title or author, just by an id like isbn (reasonable),\n     then I had a CORS policy error, which I overlooked by using a proxy I found on the internet,\n     and at last all my requests were returning an empty object, weird because when using curl on\n     my console they did return book information (although not something I could directly use here)\n     so, in order to not waste more time, I decided to just create some preloaded objects for the excercise,\n     and leave this unused code here so you could take a look at what I was trying to do.\n  \n  searchByIsbn = async (query) => {\n    try {\n      const parameters = `api/autbibkeys=ISBN:${query}`;\n      const response = await API.makeRequest({ parameters: parameters, method: 'GET', data: this.state.searchresults });\n      console.log(response);\n    } catch (error) {\n      alert(error);\n    }\n  }\n  */\n\n  searchForBooks = (query, type) => {\n    let searchresults;\n\n    switch (type) {\n      case 'title':\n      case 'author':\n        searchresults = books.filter(book => book[type].toLowerCase().trim().indexOf(query.toLowerCase().trim()) > -1);\n        break;\n      case 'isbn':\n        searchresults = books.filter(book => book[type].toString().trim() === query.trim());\n        break;\n      default: return;\n    }\n\n    this.setState({ searchresults });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <SearchForm searchForBooks={this.searchForBooks} />\n        <ul className=\"search-results\">\n          {this.state.searchresults.map(\n            key =>\n              <SearchResult\n                key={key}\n                index={1}\n                details={this.state.searchresults[key]}\n              />)}\n        </ul>\n      </React.Fragment>\n\n    )\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}